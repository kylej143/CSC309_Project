// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          Int     @id @default(autoincrement())
  username    String  @unique
  password    String
  name        String
  email       String  @unique
  avatar      Int     @default(0)
  phoneNumber String?
  role        String  @default("USER")

  CodeTemplate  CodeTemplate[]
  Blog          Blog[]
  Comment       Comment[]
  BlogRating    BlogRating[] // a user can have many blog ratings
  CommentRating CommentRating[] // a user can have many comment ratings
  ContentReport ContentReport[]
}

model CodeTemplate {
  id          Int     @id @default(autoincrement())
  title       String
  explanation String?
  code        String
  private     Boolean @default(false)
  forkID      Int?

  user   User @relation(fields: [userID], references: [id])
  userID Int

  tags  Tag[] // a code template can have many tags
  blogs Blog[] // a code template can be linked to many blogs
}

model Blog {
  id            Int     @id @default(autoincrement())
  title         String
  content       String
  flags         Int     @default(0)
  up            Int     @default(0)
  down          Int     @default(0)
  difference    Int     @default(0)
  absDifference Int     @default(0)
  hide          Boolean @default(false)

  user   User @relation(fields: [userID], references: [id])
  userID Int

  comments   Comment[] // a blog can have many comments
  tags       Tag[] // a blog can have many tags
  templates  CodeTemplate[] // a blog can link to many code templates
  BlogRating BlogRating[] // a blog can have many blog ratings
}

model BlogRating {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userID], references: [id]) // a rating is associated with one user
  userID   Int
  blog     Blog    @relation(fields: [blogID], references: [id]) // a rating is associated with one blog
  blogID   Int
  upvote   Boolean @default(false)
  downvote Boolean @default(false)

  @@unique([userID, blogID]) // a user can only have one rating of a blog
}

model CommentRating {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userID], references: [id]) // a rating is associated with one user
  userID    Int
  comment   Comment @relation(fields: [commentID], references: [id]) // a rating is associated with one blog
  commentID Int
  upvote    Boolean @default(false)
  downvote  Boolean @default(false)

  @@unique([userID, commentID]) // a user can only have one rating of a comment
}

model ContentReport {
  id        Int    @id @default(autoincrement())
  reason    String
  user      User   @relation(fields: [userID], references: [id])
  userID    Int
  blogID    Int
  commentID Int
}

model Tag {
  id        Int            @id @default(autoincrement())
  tag       String         @unique
  blogs     Blog[] // a tag can link to many blogs
  templates CodeTemplate[] // a tag can have many code templates
}

model Comment {
  id              Int       @id @default(autoincrement())
  content         String
  flags           Int       @default(0)
  up              Int       @default(0)
  down            Int       @default(0)
  difference      Int       @default(0)
  absDifference   Int       @default(0)
  hide            Boolean   @default(false)
  user            User      @relation(fields: [userID], references: [id])
  userID          Int
  blog            Blog      @relation(fields: [blogID], references: [id])
  blogID          Int
  parentCommentID Int?
  parentComment   Comment?  @relation("ParentChildComments", fields: [parentCommentID], references: [id])
  childComments   Comment[] @relation("ParentChildComments")

  CommentRating CommentRating[] // a comment can have many comment ratings
}
