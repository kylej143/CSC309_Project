// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          Int     @id @default(autoincrement())
  username    String  @unique
  password    String
  name        String
  email       String  @unique
  avatar      Int     @default(0)
  phoneNumber String?

  CodeTemplate CodeTemplate[]
  Blog         Blog[]
  Comment      Comment[]
}

model CodeTemplate {
  id          Int     @id @default(autoincrement())
  title       String
  explanation String?
  code        String
  private     Boolean @default(false)
  forkID      Int?

  user   User @relation(fields: [userID], references: [id])
  userID Int

  tags  Tag[] // a code template can have many tags
  blogs Blog[] // a code template can be linked to many blogs
}

model Blog {
  id      Int    @id @default(autoincrement())
  title   String
  content String
  flags   Int    @default(0)
  up      Int    @default(0)
  down    Int    @default(0)

  user   User @relation(fields: [userID], references: [id])
  userID Int

  comments  Comment[] // a blog can have many comments
  tags      Tag[] // a blog can have many tags
  templates CodeTemplate[] // a blog can link to many code templates
}

model Tag {
  id        Int            @id @default(autoincrement())
  tag       String         @unique
  blogs     Blog[] // a tag can link to many blogs
  templates CodeTemplate[] // a tag can have many code templates
}

model Comment {
  id              Int       @id @default(autoincrement())
  content         String
  flags           Int       @default(0)
  up              Int       @default(0)
  down            Int       @default(0)
  user            User      @relation(fields: [userID], references: [id])
  userID          Int
  blog            Blog      @relation(fields: [blogID], references: [id])
  blogID          Int
  parentCommentID Int?
  parentComment   Comment?  @relation("ParentChildComments", fields: [parentCommentID], references: [id])
  childComments   Comment[] @relation("ParentChildComments")
}
